{"version":3,"sources":["../../../src/assets/Stake.ts","../../../src/assets/xStake.ts","../../../src/abis/HomeStakeMediatorAbi.ts","../../../src/assets/sUSD.ts","../../../src/pairs/StakeBridge.ts","../../../src/assets/xsUSD.ts","../../../src/pairs/sUSDBridge.ts","index.tsx"],"names":["core","BurnerCore","signers","InjectedSigner","LocalSigner","privateKey","process","saveKey","gateways","InjectedGateway","HTTPGateway","InfuraGateway","assets","sUSD","xsUSD","exchange","Exchange","pairs","sUSDBridge","ReactDOM","render","ModernUI","title","plugins","MetamaskPlugin","document","getElementById"],"mappings":"udAEe,MAAI,IAAY,CAC3B,GAAE,QACF,KAAI,QACJ,QAAO,IACT,QAAS,+CCJI,MAAI,IAAY,CAC3B,GAAE,SACF,KAAI,SACJ,QAAO,MACT,QAAS,O,4DCNI,GACb,CACI,UAAQ,EACR,OAAM,GACN,KAAI,SACJ,QAAO,CACP,CACM,KAAE,GACF,KAAE,YAGR,SAAO,EACP,gBAAe,OACf,KAAI,YAER,CACI,UAAQ,EACR,OAAM,CACN,CACM,KAAE,SACF,KAAE,YAGR,KAAI,eACJ,QAAO,CACP,CACM,KAAE,GACF,KAAE,YAGR,SAAO,EACP,gBAAe,OACf,KAAI,a,QC9BK,GCS0B,IDT1B,IAAI,IAAqB,CAEpC,GAAE,OACF,KAAI,gBACJ,QAAO,KACT,QAAS,6CACT,YAAa,CAAC,qBEJD,MAAI,IAAY,CAC3B,GAAE,QACJ,KAAM,gBACN,QAAS,KACT,QAAS,+CCKU,E,YACjB,kFACU,CACJ,OAAQ,EAAK,GACb,aANqB,6CAOrB,OAAQ,EAAM,GACd,aAVkB,gD,mHAcP,G,4FACX,EAAO,KAAK,cACf,SAAS,KAAK,QACd,UAEG,EAAa,KAAK,UAAU,GAE5B,EAAW,IAAI,EAAK,IAAI,SAAS,EAAsB,KAAK,c,SACvB,KAAK,OAAO,EAAM,EAAU,G,uBAA/D,E,EAAA,UAAW,E,EAAA,cACb,EAAc,eAAK,GAAY,IAAI,GACnC,EAAe,EAAU,SAC3B,KADiB,gEAEwC,EAFxC,K,kBAId,CACL,SAAU,EAAY,WACtB,iB,oLAIe,G,0FACV,CACL,SAAU,KAAK,UAAU,GACzB,aAAc,O,6KAIL,EAAW,EAAe,G,uFACzB,O,SAAW,EAAS,QAAQ,SAAS,O,0BAA3C,G,cACA,EAAgD,IAAhC,OAAO,kBAAQ,EAAK,U,KACxB,O,SAAW,EAAS,QAAQ,aAAa,GAAO,O,0BAA5D,G,gCACC,CACL,YACA,kB,4GA3CmC,KCOnCA,EAAO,IAAIC,IAAW,CAC1BC,QAAS,CAAC,IAAIC,iBAAkB,IAAIC,cAAY,CAAEC,WAAYC,qEAA0BC,SAAS,KACjGC,SAAU,CACR,IAAIC,kBACJ,IAAIC,cAAY,4BAA6B,MAC7C,IAAIC,gBAAcL,qCAGpBM,OAAQ,CAACC,EAAMC,KAGXC,EAAW,IAAIC,IAAS,CAE5BC,MAAO,CAAC,IAAIC,KAKdC,IAASC,OAAO,mBAFK,kBAAM,kBAACC,EAAA,EAAD,CAAUC,MAAM,gBAAgBtB,KAAMA,EAAMuB,QAAS,CAACR,EAAU,IAAIS,SAE/E,MAAkBC,SAASC,eAAe,W","file":"static/js/main.24614126.chunk.js","sourcesContent":["import { ERC677Asset } from '@poanet/tokenbridge-bw-exchange';\nexport default new ERC677Asset({\n    id: 'stake',\n    name: 'STAKE',\n    network: '1',\n    address: '0x0Ae055097C6d159879521C384F1D2123D1f195e6'\n});\n//# sourceMappingURL=Stake.js.map","import { ERC677Asset } from '@poanet/tokenbridge-bw-exchange';\nexport default new ERC677Asset({\n    id: 'xstake',\n    name: 'xSTAKE',\n    network: '100',\n    address: '0x'\n});\n//# sourceMappingURL=xStake.js.map","export default [\n    {\n        constant: true,\n        inputs: [],\n        name: 'getFee',\n        outputs: [\n            {\n                name: '',\n                type: 'uint256'\n            }\n        ],\n        payable: false,\n        stateMutability: 'view',\n        type: 'function'\n    },\n    {\n        constant: true,\n        inputs: [\n            {\n                name: '_value',\n                type: 'uint256'\n            }\n        ],\n        name: 'calculateFee',\n        outputs: [\n            {\n                name: '',\n                type: 'uint256'\n            }\n        ],\n        payable: false,\n        stateMutability: 'view',\n        type: 'function'\n    }\n];\n//# sourceMappingURL=HomeStakeMediatorAbi.js.map","import { BridgeableERC20Asset } from '@poanet/tokenbridge-bw-exchange';\nexport default new BridgeableERC20Asset({\n    id: 'susd',\n    name: 'MAIN on kovan',\n    network: '42',\n    address: '0x41c16473b12211892c813f52815f700440471aa0',\n    bridgeModes: ['erc-to-erc-amb']\n});\n//# sourceMappingURL=sUSD.js.map","import { Mediator } from '@poanet/tokenbridge-bw-exchange';\nimport { Stake, xStake } from '../index';\nimport HomeStakeMediatorAbi from '../abis/HomeStakeMediatorAbi';\nimport { fromWei, toBN } from 'web3-utils';\nconst homeMediatorAddress = '0x';\nconst foreignMediatorAddress = '0x';\nexport default class StakeBridge extends Mediator {\n    constructor({ assetA = xStake.id, assetABridge = homeMediatorAddress, assetB = Stake.id, assetBBridge = foreignMediatorAddress }) {\n        super({\n            assetA,\n            assetABridge,\n            assetB,\n            assetBBridge\n        });\n    }\n    async estimateAtoB(value) {\n        const web3 = this.getExchange()\n            .getAsset(this.assetA)\n            .getWeb3();\n        const userAmount = this._getValue(value);\n        const contract = new web3.eth.Contract(HomeStakeMediatorAbi, this.assetABridge);\n        const { feeAmount, feePercentage } = await this.getFee(web3, contract, userAmount);\n        const finalAmount = toBN(userAmount).sub(feeAmount);\n        const estimateInfo = feeAmount.isZero()\n            ? null\n            : `Estimation takes fee charges into consideration. Fee: ${feePercentage}%`;\n        return {\n            estimate: finalAmount.toString(),\n            estimateInfo\n        };\n    }\n    async estimateBtoA(value) {\n        return {\n            estimate: this._getValue(value),\n            estimateInfo: null\n        };\n    }\n    async getFee(web3, contract, value) {\n        const fee = toBN(await contract.methods.getFee().call());\n        const feePercentage = Number(fromWei(fee, 'ether')) * 100;\n        const feeAmount = toBN(await contract.methods.calculateFee(value).call());\n        return {\n            feeAmount,\n            feePercentage\n        };\n    }\n}\n//# sourceMappingURL=StakeBridge.js.map","import { ERC677Asset } from '@poanet/tokenbridge-bw-exchange';\nexport default new ERC677Asset({\n    id: 'xsusd',\n    name: 'Main on Sokol',\n    network: '77',\n    address: '0xFb53E551d38D404fD78F6d3628067a6f2898008E'\n});\n//# sourceMappingURL=xsUSD.js.map","import { Mediator } from '@poanet/tokenbridge-bw-exchange';\nimport HomeStakeMediatorAbi from '../abis/HomeStakeMediatorAbi';\nimport { fromWei, toBN } from 'web3-utils';\nimport { sUSD, xsUSD } from '../index';\nconst homeMediatorAddress = '0xF5975aAce8673EE3A303eb585733d9BdCf9eD6d7';\nconst foreignMediatorAddress = '0x9952b09216320f85AECc0cAaF48feE4705f423c7';\nexport default class StakeBridge extends Mediator {\n    constructor() {\n        super({\n            assetA: sUSD.id,\n            assetABridge: foreignMediatorAddress,\n            assetB: xsUSD.id,\n            assetBBridge: homeMediatorAddress\n        });\n    }\n    async estimateAtoB(value) {\n        const web3 = this.getExchange()\n            .getAsset(this.assetA)\n            .getWeb3();\n        const userAmount = this._getValue(value);\n        const contract = new web3.eth.Contract(HomeStakeMediatorAbi, this.assetABridge);\n        const { feeAmount, feePercentage } = await this.getFee(web3, contract, userAmount);\n        const finalAmount = toBN(userAmount).sub(feeAmount);\n        const estimateInfo = feeAmount.isZero()\n            ? null\n            : `Estimation takes fee charges into consideration. Fee: ${feePercentage}%`;\n        return {\n            estimate: finalAmount.toString(),\n            estimateInfo\n        };\n    }\n    async estimateBtoA(value) {\n        return {\n            estimate: this._getValue(value),\n            estimateInfo: null\n        };\n    }\n    async getFee(web3, contract, value) {\n        const fee = toBN(await contract.methods.getFee().call());\n        const feePercentage = Number(fromWei(fee, 'ether')) * 100;\n        const feeAmount = toBN(await contract.methods.calculateFee(value).call());\n        return {\n            feeAmount,\n            feePercentage\n        };\n    }\n}\n//# sourceMappingURL=sUSDBridge.js.map","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport BurnerCore from '@burner-wallet/core'\nimport { InjectedSigner, LocalSigner } from '@burner-wallet/core/signers'\n// TODO XDaiGateway\nimport { InfuraGateway, InjectedGateway, XDaiGateway, HTTPGateway } from '@burner-wallet/core/gateways'\nimport ModernUI from '@burner-wallet/modern-ui'\nimport Exchange from '@burner-wallet/exchange'\nimport MetamaskPlugin from '@burner-wallet/metamask-plugin'\n// Import resources from our plugin\n// import { Stake, xStake, StakeBridge } from 'my-plugin'\nimport { sUSD, xsUSD, sUSDBridge } from 'my-plugin'\n\n// gateways是Home和forign的URL\n// const core = new BurnerCore({\n//   signers: [new InjectedSigner(), new LocalSigner({ privateKey: process.env.REACT_APP_PK, saveKey: false })],\n//   gateways: [new InjectedGateway(), new XDaiGateway(), new InfuraGateway(process.env.REACT_APP_INFURA_KEY)],\n//   //   assets: [Stake, xStake]\n//   assets: [sUSD, xsUSD]\n// })\nconst core = new BurnerCore({\n  signers: [new InjectedSigner(), new LocalSigner({ privateKey: process.env.REACT_APP_PK, saveKey: false })],\n  gateways: [\n    new InjectedGateway(),\n    new HTTPGateway('https://sokol.poa.network', '77'),\n    new InfuraGateway(process.env.REACT_APP_INFURA_KEY)\n  ],\n  //   assets: [Stake, xStake]\n  assets: [sUSD, xsUSD]\n})\n\nconst exchange = new Exchange({\n  //   pairs: [new StakeBridge()]\n  pairs: [new sUSDBridge()]\n})\n\nconst BurnerWallet = () => <ModernUI title=\"Burner Wallet\" core={core} plugins={[exchange, new MetamaskPlugin()]} />\n\nReactDOM.render(<BurnerWallet />, document.getElementById('root'))\n"],"sourceRoot":""}